{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rshaikh\\\\Desktop\\\\development\\\\dev-front\\\\src\\\\components\\\\dashboard\\\\GitHubDetail.js\";\nimport React, { useEffect, Fragment } from 'react';\nimport { connect } from \"react-redux\";\nimport PropTypes from 'prop-types';\nimport { getGithubRepo } from '../../actions/profile';\n\nfunction GitHubDetail({\n  profile,\n  getGithubRepo\n}) {\n  useEffect(() => {\n    getGithubRepo(profile.profile.handle);\n  }, [getGithubRepo]);\n  console.log(\"Github............\", profile);\n  return /*#__PURE__*/React.createElement(Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"profile-github\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    className: \"text-primary my-1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"i\", {\n    className: \"fab fa-github\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 13\n    }\n  }), \" Github Repos\"), profile.repos !== null && profile.repos ? profile.repos.map(repo => /*#__PURE__*/React.createElement(\"div\", {\n    className: \"repo bg-white p-1 my-1\",\n    key: repo.html_url,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"h4\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"a\", {\n    href: repo.html_url,\n    target: \"_blank\",\n    rel: \"noopener noreferrer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 19\n    }\n  }, repo.name)), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 15\n    }\n  }, repo.description)), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"li\", {\n    className: \"badge badge-primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 21\n    }\n  }, \"Stars: \", repo.stargazers_count), /*#__PURE__*/React.createElement(\"li\", {\n    className: \"badge badge-dark\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 21\n    }\n  }, \"Watchers: \", repo.watchers_count), /*#__PURE__*/React.createElement(\"li\", {\n    className: \"badge badge-light\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 21\n    }\n  }, \"Forks: \", repo.forks_count))))) : /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 15\n    }\n  }, \"No Found\")));\n}\n\nGitHubDetail.propTypes = {\n  profile: PropTypes.object.isRequired,\n  getGithubRepo: PropTypes.func.isRequired\n};\n\nconst mapStateToProps = state => ({\n  profile: state.profile\n});\n\nexport default connect(mapStateToProps, {\n  getGithubRepo\n})(GitHubDetail);","map":{"version":3,"sources":["C:/Users/rshaikh/Desktop/development/dev-front/src/components/dashboard/GitHubDetail.js"],"names":["React","useEffect","Fragment","connect","PropTypes","getGithubRepo","GitHubDetail","profile","handle","console","log","repos","map","repo","html_url","name","description","stargazers_count","watchers_count","forks_count","propTypes","object","isRequired","func","mapStateToProps","state"],"mappings":";AAAA,OAAOA,KAAP,IAAcC,SAAd,EAAyBC,QAAzB,QAAwC,OAAxC;AACA,SAAQC,OAAR,QAAwB,aAAxB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAAQC,aAAR,QAA4B,uBAA5B;;AAEA,SAASC,YAAT,CAAsB;AAACC,EAAAA,OAAD;AAASF,EAAAA;AAAT,CAAtB,EAA+C;AAE3CJ,EAAAA,SAAS,CAAC,MAAM;AACZI,IAAAA,aAAa,CAACE,OAAO,CAACA,OAAR,CAAgBC,MAAjB,CAAb;AACH,GAFQ,EAEN,CAACH,aAAD,CAFM,CAAT;AAIAI,EAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ,EAAiCH,OAAjC;AACA,sBACI,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAK,IAAA,SAAS,EAAC,gBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACF;AAAI,IAAA,SAAS,EAAC,mBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAG,IAAA,SAAS,EAAC,eAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,kBADE,EAIDA,OAAO,CAACI,KAAR,KAAkB,IAAlB,IAA0BJ,OAAO,CAACI,KAAlC,GAA0CJ,OAAO,CAACI,KAAR,CAAcC,GAAd,CAAkBC,IAAI,iBAC/D;AAAK,IAAA,SAAS,EAAC,wBAAf;AAAwC,IAAA,GAAG,EAAEA,IAAI,CAACC,QAAlD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAI;AAAG,IAAA,IAAI,EAAED,IAAI,CAACC,QAAd;AAAwB,IAAA,MAAM,EAAC,QAA/B;AACA,IAAA,GAAG,EAAC,qBADJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAC2BD,IAAI,CAACE,IADhC,CAAJ,CADF,eAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGF,IAAI,CAACG,WADR,CAHF,CADA,eAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACM;AAAI,IAAA,SAAS,EAAC,qBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAA4CH,IAAI,CAACI,gBAAjD,CADN,eAEM;AAAI,IAAA,SAAS,EAAC,kBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAA4CJ,IAAI,CAACK,cAAjD,CAFN,eAGM;AAAI,IAAA,SAAS,EAAC,mBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAA0CL,IAAI,CAACM,WAA/C,CAHN,CADF,CARA,CADyC,CAA1C,gBAiBG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBArBF,CADJ,CADJ;AA2BH;;AAEDb,YAAY,CAACc,SAAb,GAAyB;AACrBb,EAAAA,OAAO,EAAEH,SAAS,CAACiB,MAAV,CAAiBC,UADL;AAErBjB,EAAAA,aAAa,EAAED,SAAS,CAACmB,IAAV,CAAeD;AAFT,CAAzB;;AAMA,MAAME,eAAe,GAACC,KAAK,KAAG;AAC1BlB,EAAAA,OAAO,EAAGkB,KAAK,CAAClB;AADU,CAAH,CAA3B;;AAIA,eAAeJ,OAAO,CAACqB,eAAD,EAAkB;AAAEnB,EAAAA;AAAF,CAAlB,CAAP,CAA4CC,YAA5C,CAAf","sourcesContent":["import React,{useEffect, Fragment} from 'react';\r\nimport{ connect }  from \"react-redux\";\r\nimport PropTypes from 'prop-types';\r\nimport {getGithubRepo} from '../../actions/profile';\r\n\r\nfunction GitHubDetail({profile,getGithubRepo}) {\r\n\r\n    useEffect(() => {\r\n        getGithubRepo(profile.profile.handle);\r\n    }, [getGithubRepo]);\r\n\r\n    console.log(\"Github............\",profile)\r\n    return (\r\n        <Fragment>\r\n            <div className=\"profile-github\">\r\n          <h2 className=\"text-primary my-1\">\r\n            <i className=\"fab fa-github\"></i> Github Repos\r\n          </h2>\r\n          {profile.repos !== null && profile.repos ? profile.repos.map(repo=>(\r\n            <div className=\"repo bg-white p-1 my-1\" key={repo.html_url}>\r\n            <div>\r\n              <h4><a href={repo.html_url} target=\"_blank\"\r\n                  rel=\"noopener noreferrer\">{repo.name}</a></h4>\r\n              <p>\r\n                {repo.description}\r\n              </p>\r\n            </div>\r\n            <div>\r\n              <ul>\r\n                    <li className=\"badge badge-primary\">Stars: {repo.stargazers_count}</li>\r\n                    <li className=\"badge badge-dark\">Watchers: {repo.watchers_count}</li>\r\n                    <li className=\"badge badge-light\">Forks: {repo.forks_count}</li>\r\n              </ul>\r\n            </div>\r\n            </div>\r\n          )): <strong>No Found</strong>}\r\n        </div>\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nGitHubDetail.propTypes = {\r\n    profile: PropTypes.object.isRequired,\r\n    getGithubRepo: PropTypes.func.isRequired,\r\n\r\n}\r\n\r\nconst mapStateToProps=state=>({\r\n    profile : state.profile\r\n  })\r\n  \r\nexport default connect(mapStateToProps, { getGithubRepo })(GitHubDetail);\r\n\r\n"]},"metadata":{},"sourceType":"module"}