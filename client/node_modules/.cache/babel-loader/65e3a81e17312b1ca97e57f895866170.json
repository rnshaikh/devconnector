{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rshaikh\\\\Desktop\\\\development\\\\dev-front\\\\src\\\\components\\\\comment\\\\CommentList.js\";\nimport React, { Fragment } from 'react';\nimport Moment from 'react-moment';\nimport PropTypes from 'prop-types';\n\nfunction CommentList({\n  comments,\n  auth,\n  post_id,\n  removeComment\n}) {\n  console.log(\"Comments\", comments, post_id);\n\n  const removeCommentId = comment_id => {\n    removeComment(post_id, comment_id);\n  };\n\n  return /*#__PURE__*/React.createElement(Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 9\n    }\n  }, comments.map(comment => {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"post bg-white p-1 my-1\",\n      key: comment._id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 23\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"a\", {\n      href: \"profile.html\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      className: \"round-img\",\n      src: comment.avatar,\n      alt: \"\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(\"h4\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 21\n      }\n    }, comment.name))), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      className: \"my-1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 21\n      }\n    }, comment.text), /*#__PURE__*/React.createElement(\"p\", {\n      className: \"post-date\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 21\n      }\n    }, \"Posted on \", /*#__PURE__*/React.createElement(Moment, {\n      format: \"YYYY/MM/DD\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 31\n      }\n    }, comment.date)), auth.user._id === comment.user ? /*#__PURE__*/React.createElement(\"button\", {\n      type: \"button\",\n      className: \"btn btn-danger\",\n      onClick: () => {\n        removeCommentId(comment._id);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"i\", {\n      className: \"fa fa-times\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 29\n      }\n    })) : \"\"));\n  }));\n}\n\nCommentList.propTypes = {\n  comments: PropTypes.array.isRequired,\n  auth: PropTypes.object.isRequired,\n  removeComment: PropTypes.func.isRequired,\n  post_id: PropTypes.string.isRequired\n};\n\nconst mapStateToProps = state => ({\n  post: state.post,\n  auth: state.auth\n});\n\nexport default connect(mapStateToProps)(CommentList);","map":{"version":3,"sources":["C:/Users/rshaikh/Desktop/development/dev-front/src/components/comment/CommentList.js"],"names":["React","Fragment","Moment","PropTypes","CommentList","comments","auth","post_id","removeComment","console","log","removeCommentId","comment_id","map","comment","_id","avatar","name","text","date","user","propTypes","array","isRequired","object","func","string","mapStateToProps","state","post","connect"],"mappings":";AAAA,OAAOA,KAAP,IAAcC,QAAd,QAA6B,OAA7B;AACA,OAAOC,MAAP,MAAmB,cAAnB;AACA,OAAOC,SAAP,MAAsB,YAAtB;;AAGA,SAASC,WAAT,CAAqB;AAACC,EAAAA,QAAD;AAAWC,EAAAA,IAAX;AAAiBC,EAAAA,OAAjB;AAA0BC,EAAAA;AAA1B,CAArB,EAA+D;AAE3DC,EAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBL,QAAxB,EAAkCE,OAAlC;;AAEA,QAAMI,eAAe,GAAIC,UAAD,IAAc;AAClCJ,IAAAA,aAAa,CAACD,OAAD,EAAUK,UAAV,CAAb;AACH,GAFD;;AAIA,sBACI,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEKP,QAAQ,CAACQ,GAAT,CAAaC,OAAO,IAAE;AACpB,wBAAO;AAAK,MAAA,SAAS,EAAC,wBAAf;AAAwC,MAAA,GAAG,EAAEA,OAAO,CAACC,GAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAG,MAAA,IAAI,EAAC,cAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACA;AACI,MAAA,SAAS,EAAC,WADd;AAEI,MAAA,GAAG,EAAED,OAAO,CAACE,MAFjB;AAGI,MAAA,GAAG,EAAC,EAHR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADA,eAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAKF,OAAO,CAACG,IAAb,CANA,CADJ,CADM,eAWN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAG,MAAA,SAAS,EAAC,MAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACCH,OAAO,CAACI,IADT,CADJ,eAII;AAAG,MAAA,SAAS,EAAC,WAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kCACU,oBAAC,MAAD;AAAQ,MAAA,MAAM,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACLJ,OAAO,CAACK,IADH,CADV,CAJJ,EASKb,IAAI,CAACc,IAAL,CAAUL,GAAV,KAAkBD,OAAO,CAACM,IAA1B,gBACG;AAAQ,MAAA,IAAI,EAAC,QAAb;AAAsB,MAAA,SAAS,EAAC,gBAAhC;AAAiD,MAAA,OAAO,EAAE,MAAI;AAACT,QAAAA,eAAe,CAACG,OAAO,CAACC,GAAT,CAAf;AAA6B,OAA5F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAG,MAAA,SAAS,EAAC,aAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CADH,GAGe,EAZpB,CAXM,CAAP;AA2BF,GA5BA,CAFL,CADJ;AAkCH;;AAEDX,WAAW,CAACiB,SAAZ,GAAwB;AACpBhB,EAAAA,QAAQ,EAAGF,SAAS,CAACmB,KAAV,CAAgBC,UADP;AAEpBjB,EAAAA,IAAI,EAAGH,SAAS,CAACqB,MAAV,CAAiBD,UAFJ;AAGpBf,EAAAA,aAAa,EAAEL,SAAS,CAACsB,IAAV,CAAeF,UAHV;AAIpBhB,EAAAA,OAAO,EAAEJ,SAAS,CAACuB,MAAV,CAAiBH;AAJN,CAAxB;;AAOA,MAAMI,eAAe,GAACC,KAAK,KAAG;AAC1BC,EAAAA,IAAI,EAAED,KAAK,CAACC,IADc;AAE1BvB,EAAAA,IAAI,EAAEsB,KAAK,CAACtB;AAFc,CAAH,CAA3B;;AAKA,eAAewB,OAAO,CAACH,eAAD,CAAP,CAA2BvB,WAA3B,CAAf","sourcesContent":["import React,{Fragment} from 'react';\r\nimport Moment from 'react-moment';\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\nfunction CommentList({comments, auth, post_id, removeComment}) {\r\n\r\n    console.log(\"Comments\", comments, post_id)\r\n\r\n    const removeCommentId = (comment_id)=>{\r\n        removeComment(post_id, comment_id)\r\n    }\r\n\r\n    return (\r\n        <Fragment>\r\n\r\n            {comments.map(comment=>{\r\n               return(<div className=\"post bg-white p-1 my-1\" key={comment._id}>\r\n                <div>\r\n                    <a href=\"profile.html\">\r\n                    <img\r\n                        className=\"round-img\"\r\n                        src={comment.avatar}\r\n                        alt=\"\"\r\n                    />\r\n                    <h4>{comment.name}</h4>\r\n                    </a>\r\n                </div>\r\n                <div>\r\n                    <p className=\"my-1\">\r\n                    {comment.text}\r\n                    </p>\r\n                    <p className=\"post-date\">\r\n                    Posted on <Moment format=\"YYYY/MM/DD\">\r\n                        {comment.date}\r\n                    </Moment>\r\n                    </p>\r\n                    {auth.user._id === comment.user ?\r\n                        <button type=\"button\" className=\"btn btn-danger\" onClick={()=>{removeCommentId(comment._id)}}>\r\n                            <i className=\"fa fa-times\"></i>\r\n                        </button> : \"\"\r\n                    }\r\n                </div>\r\n            </div>)\r\n            })}\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nCommentList.propTypes = {\r\n    comments : PropTypes.array.isRequired,\r\n    auth : PropTypes.object.isRequired,\r\n    removeComment: PropTypes.func.isRequired,\r\n    post_id: PropTypes.string.isRequired,\r\n}\r\n\r\nconst mapStateToProps=state=>({\r\n    post: state.post,\r\n    auth: state.auth\r\n})\r\n\r\nexport default connect(mapStateToProps, )(CommentList);"]},"metadata":{},"sourceType":"module"}