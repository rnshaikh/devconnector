{"ast":null,"code":"import { setAlert } from './alert';\nimport axios from 'axios';\nimport { GET_POST, POST_ERROR, GET_ALL_POST } from './types';\nexport const createPost = (fromData, history, edit = false) => async dispatch => {\n  try {\n    console.log(\"Profile Form Data\", fromData);\n    debugger;\n    const config = {\n      headers: {\n        \"content-type\": \"application/json\"\n      }\n    };\n    const res = await axios.post('http://127.0.0.1:5000/api/posts/', fromData, config);\n\n    if (res.status == 200) {\n      const res = await axios.get(`http://127.0.0.1:5000/api/posts/`);\n      dispatch({\n        type: GET_ALL_POST,\n        payload: res.data\n      });\n      dispatch(setAlert(\"Post Added\", \"success\"));\n    } else {\n      dispatch({\n        type: POST_ERROR,\n        payload: {\n          status: res.status,\n          msg: res.msg\n        }\n      });\n    }\n  } catch (err) {\n    const errors = err.response.data.errors;\n    console.log(err);\n\n    if (errors) {\n      errors.forEach(error => {\n        dispatch(setAlert(error, \"danger\"));\n      });\n    }\n\n    dispatch({\n      type: POST_ERROR,\n      payload: {\n        status: err.response.status,\n        msg: err.response.statusText\n      }\n    });\n  }\n};\nexport const getPost = () => async dispatch => {\n  try {\n    const res = await axios.get(`http://127.0.0.1:5000/api/posts/`);\n    dispatch({\n      type: GET_ALL_POST,\n      payload: res.data\n    });\n  } catch (err) {\n    debugger;\n    dispatch({\n      type: POST_ERROR,\n      payload: {\n        status: err.response.status,\n        msg: err.response.statusText\n      }\n    });\n  }\n};\nexport const getPostById = id => async dispatch => {\n  try {\n    const res = await axios.get(`http://127.0.0.1:5000/api/posts/${id}`);\n    dispatch({\n      type: GET_POST,\n      payload: res.data\n    });\n  } catch (err) {\n    debugger;\n    dispatch({\n      type: POST_ERROR,\n      payload: {\n        status: err.response.status,\n        msg: err.response.statusText\n      }\n    });\n  }\n};\nexport const deletePost = id => async dispatch => {\n  try {\n    const res = await axios.delete(`http://127.0.0.1:5000/api/posts/${id}`);\n\n    if (res.status == 200) {\n      const res = await axios.get(`http://127.0.0.1:5000/api/posts/`);\n      dispatch({\n        type: GET_ALL_POST,\n        payload: res.data\n      });\n      dispatch(setAlert(\"Post deleted\", \"success\"));\n    } else {\n      dispatch({\n        type: POST_ERROR,\n        payload: {\n          status: res.status,\n          msg: res.msg\n        }\n      });\n    }\n  } catch (err) {\n    debugger;\n    dispatch({\n      type: POST_ERROR,\n      payload: {\n        status: err.response.status,\n        msg: err.response.statusText\n      }\n    });\n  }\n};\nexport const likePost = id => async dispatch => {\n  try {\n    const config = {\n      headers: {\n        \"content-type\": \"application/json\"\n      }\n    };\n    const body = {\n      \"msg\": \"text\"\n    };\n    const res = await axios.put(`http://127.0.0.1:5000/api/posts/like/${id}`, body, config);\n\n    if (res.status == 200) {\n      const res = await axios.get(`http://127.0.0.1:5000/api/posts/`);\n      dispatch({\n        type: GET_ALL_POST,\n        payload: res.data\n      });\n      dispatch(setAlert(\"Post liked\", \"success\"));\n    } else {\n      dispatch({\n        type: POST_ERROR,\n        payload: {\n          status: res.status,\n          msg: res.msg\n        }\n      });\n    }\n  } catch (err) {\n    debugger;\n    dispatch({\n      type: POST_ERROR,\n      payload: {\n        status: err.response.status,\n        msg: err.response.data.msg\n      }\n    });\n    dispatch(setAlert(err.response.data.msg, \"danger\"));\n  }\n};\nexport const unlikePost = id => async dispatch => {\n  try {\n    const config = {\n      headers: {\n        \"content-type\": \"application/json\"\n      }\n    };\n    const body = {\n      \"text\": \"msg\"\n    };\n    const res = await axios.put(`http://127.0.0.1:5000/api/posts/unlike/${id}`, body, config);\n\n    if (res.status == 200) {\n      const res = await axios.get(`http://127.0.0.1:5000/api/posts/`);\n      dispatch({\n        type: GET_ALL_POST,\n        payload: res.data\n      });\n      dispatch(setAlert(\"Post unliked\", \"success\"));\n    } else {\n      dispatch({\n        type: POST_ERROR,\n        payload: {\n          status: res.status,\n          msg: res.msg\n        }\n      });\n    }\n  } catch (err) {\n    debugger;\n    dispatch({\n      type: POST_ERROR,\n      payload: {\n        status: err.response.status,\n        msg: err.response.data.msg\n      }\n    });\n    dispatch(setAlert(err.response.data.msg, \"danger\"));\n  }\n};\nexport const createComment = (fromData, id, history, edit = false) => async dispatch => {\n  try {\n    console.log(\"comment Form Data\", fromData);\n    debugger;\n    const config = {\n      headers: {\n        \"content-type\": \"application/json\"\n      }\n    };\n    const res = await axios.post(`http://127.0.0.1:5000/api/comment/${id}`, fromData, config);\n\n    if (res.status == 200) {\n      const res = await axios.get(`http://127.0.0.1:5000/api/posts/${id}`);\n      dispatch({\n        type: GET_POST,\n        payload: res.data\n      });\n      dispatch(setAlert(\"Comment Added\", \"success\"));\n    } else {\n      dispatch({\n        type: POST_ERROR,\n        payload: {\n          status: res.status,\n          msg: res.msg\n        }\n      });\n    }\n  } catch (err) {\n    const errors = err.response.data.errors;\n    console.log(err);\n\n    if (errors) {\n      errors.forEach(error => {\n        dispatch(setAlert(error, \"danger\"));\n      });\n    }\n\n    dispatch({\n      type: POST_ERROR,\n      payload: {\n        status: err.response.status,\n        msg: err.response.statusText\n      }\n    });\n  }\n};\nexport const removeComment = (id, comment_id) => async dispatch => {\n  try {\n    const res = await axios.delete(`http://127.0.0.1:5000/api/comment/${id}/${comment_id}`);\n\n    if (res.status == 200) {\n      const res = await axios.get(`http://127.0.0.1:5000/api/posts/${id}`);\n      dispatch({\n        type: GET_POST,\n        payload: res.data\n      });\n      dispatch(setAlert(\"Comment removed\", \"success\"));\n    } else {\n      dispatch({\n        type: POST_ERROR,\n        payload: {\n          status: res.status,\n          msg: res.msg\n        }\n      });\n    }\n  } catch (err) {\n    debugger;\n    dispatch({\n      type: POST_ERROR,\n      payload: {\n        status: err.response.status,\n        msg: err.response.statusText\n      }\n    });\n  }\n};","map":{"version":3,"sources":["C:/Users/rshaikh/Desktop/development/dev-front/src/actions/post.js"],"names":["setAlert","axios","GET_POST","POST_ERROR","GET_ALL_POST","createPost","fromData","history","edit","dispatch","console","log","config","headers","res","post","status","get","type","payload","data","msg","err","errors","response","forEach","error","statusText","getPost","getPostById","id","deletePost","delete","likePost","body","put","unlikePost","createComment","removeComment","comment_id"],"mappings":"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","sourcesContent":["import {setAlert} from './alert';\r\nimport axios from 'axios';\r\nimport{ GET_POST, POST_ERROR,GET_ALL_POST } from './types';\r\n\r\nexport const createPost = (fromData, history, edit=false) => async dispatch =>{\r\n    try{    \r\n        console.log(\"Profile Form Data\", fromData)\r\n        debugger;\r\n\r\n        const config = {\r\n            headers : {\r\n                \"content-type\": \"application/json\",\r\n            }\r\n        }\r\n\r\n        const res = await axios.post('http://127.0.0.1:5000/api/posts/', fromData, config)\r\n        \r\n        if (res.status == 200){\r\n            const res = await axios.get(`http://127.0.0.1:5000/api/posts/`)\r\n\r\n            dispatch({\r\n                type: GET_ALL_POST,\r\n                payload: res.data\r\n            })\r\n\r\n            dispatch(setAlert(\"Post Added\", \"success\"));\r\n        }\r\n        else{\r\n            dispatch({\r\n                type: POST_ERROR,\r\n                payload: {status:res.status, msg:res.msg}\r\n            });\r\n        }\r\n    }   \r\n    catch(err){\r\n\r\n        const errors = err.response.data.errors\r\n        console.log(err)\r\n        if(errors){\r\n            errors.forEach(error => {\r\n                dispatch(setAlert(error,\"danger\"))\r\n            });\r\n        }\r\n\r\n        dispatch({\r\n            type: POST_ERROR,\r\n            payload: {status:err.response.status, msg:err.response.statusText}\r\n        });\r\n\r\n    }\r\n}\r\n\r\n\r\nexport const getPost = ()=> async dispatch =>{\r\n\r\n    try{\r\n\r\n        const res = await axios.get(`http://127.0.0.1:5000/api/posts/`)\r\n\r\n        dispatch({\r\n            type: GET_ALL_POST,\r\n            payload: res.data\r\n        })\r\n\r\n    }\r\n    catch(err){ \r\n        debugger;\r\n        dispatch({\r\n            type: POST_ERROR,\r\n            payload: {status:err.response.status, msg:err.response.statusText}\r\n        });\r\n    }\r\n\r\n}\r\n\r\n\r\nexport const getPostById = (id)=> async dispatch =>{\r\n\r\n    try{\r\n\r\n        const res = await axios.get(`http://127.0.0.1:5000/api/posts/${id}`)\r\n\r\n        dispatch({\r\n            type: GET_POST,\r\n            payload: res.data\r\n        })\r\n\r\n    }\r\n    catch(err){ \r\n        debugger;\r\n        dispatch({\r\n            type: POST_ERROR,\r\n            payload: {status:err.response.status, msg:err.response.statusText}\r\n        });\r\n    }\r\n}\r\n\r\n\r\nexport const deletePost = (id)=> async dispatch =>{\r\n\r\n    try{\r\n\r\n        const res = await axios.delete(`http://127.0.0.1:5000/api/posts/${id}`)\r\n\r\n        if (res.status == 200){\r\n            const res = await axios.get(`http://127.0.0.1:5000/api/posts/`)\r\n\r\n            dispatch({\r\n                type: GET_ALL_POST,\r\n                payload: res.data\r\n            })\r\n\r\n            dispatch(setAlert(\"Post deleted\", \"success\"));\r\n        }\r\n        else{\r\n            dispatch({\r\n                type: POST_ERROR,\r\n                payload: {status:res.status, msg:res.msg}\r\n            });\r\n        }\r\n\r\n    }\r\n    catch(err){ \r\n        debugger;\r\n        dispatch({\r\n            type: POST_ERROR,\r\n            payload: {status:err.response.status, msg:err.response.statusText}\r\n        });\r\n    }\r\n}\r\n\r\n\r\n\r\nexport const likePost = (id)=> async dispatch =>{\r\n\r\n    try{\r\n\r\n        const config = {\r\n            headers : {\r\n                \"content-type\": \"application/json\",\r\n            }\r\n        }\r\n\r\n        const body = {\"msg\": \"text\"}\r\n\r\n        const res = await axios.put(`http://127.0.0.1:5000/api/posts/like/${id}`, body, config)\r\n\r\n        if (res.status == 200){\r\n            const res = await axios.get(`http://127.0.0.1:5000/api/posts/`)\r\n\r\n            dispatch({\r\n                type: GET_ALL_POST,\r\n                payload: res.data\r\n            })\r\n\r\n            dispatch(setAlert(\"Post liked\", \"success\"));\r\n        }\r\n        else{\r\n            dispatch({\r\n                type: POST_ERROR,\r\n                payload: {status:res.status, msg:res.msg}\r\n            });\r\n        }\r\n\r\n    }\r\n    catch(err){ \r\n        debugger;\r\n        dispatch({\r\n            type: POST_ERROR,\r\n            payload: {status:err.response.status, msg:err.response.data.msg            }\r\n        });\r\n        dispatch(setAlert(err.response.data.msg, \"danger\"));\r\n    }\r\n}\r\n\r\n\r\nexport const unlikePost = (id)=> async dispatch =>{\r\n\r\n    try{\r\n\r\n        const config = {\r\n            headers : {\r\n                \"content-type\": \"application/json\",\r\n            }\r\n        }\r\n\r\n        const body = {\"text\": \"msg\"}\r\n\r\n        const res = await axios.put(`http://127.0.0.1:5000/api/posts/unlike/${id}`, body, config)\r\n\r\n        if (res.status == 200){\r\n            const res = await axios.get(`http://127.0.0.1:5000/api/posts/`)\r\n\r\n            dispatch({\r\n                type: GET_ALL_POST,\r\n                payload: res.data\r\n            })\r\n\r\n            dispatch(setAlert(\"Post unliked\", \"success\"));\r\n        }\r\n        else{\r\n            dispatch({\r\n                type: POST_ERROR,\r\n                payload: {status:res.status, msg:res.msg}\r\n            });\r\n        }\r\n\r\n    }\r\n    catch(err){ \r\n        debugger;\r\n        dispatch({\r\n            type: POST_ERROR,\r\n            payload: {status:err.response.status, msg:err.response.data.msg}\r\n        });\r\n        dispatch(setAlert(err.response.data.msg, \"danger\"));\r\n    }\r\n}\r\n \r\n\r\n\r\nexport const createComment = (fromData, id, history, edit=false) => async dispatch =>{\r\n    try{    \r\n        console.log(\"comment Form Data\", fromData)\r\n        debugger;\r\n\r\n        const config = {\r\n            headers : {\r\n                \"content-type\": \"application/json\",\r\n            }\r\n        }\r\n\r\n        const res = await axios.post(`http://127.0.0.1:5000/api/comment/${id}`, fromData, config)\r\n        \r\n        if (res.status == 200){\r\n            const res = await axios.get(`http://127.0.0.1:5000/api/posts/${id}`)\r\n\r\n            dispatch({\r\n                type: GET_POST,\r\n                payload: res.data\r\n            })\r\n            dispatch(setAlert(\"Comment Added\", \"success\"));\r\n        }\r\n        else{\r\n            dispatch({\r\n                type: POST_ERROR,\r\n                payload: {status:res.status, msg:res.msg}\r\n            });\r\n        }\r\n    }   \r\n    catch(err){\r\n\r\n        const errors = err.response.data.errors\r\n        console.log(err)\r\n        if(errors){\r\n            errors.forEach(error => {\r\n                dispatch(setAlert(error,\"danger\"))\r\n            });\r\n        }\r\n\r\n        dispatch({\r\n            type: POST_ERROR,\r\n            payload: {status:err.response.status, msg:err.response.statusText}\r\n        });\r\n\r\n    }\r\n}\r\n\r\nexport const removeComment = (id, comment_id) => async dispatch =>{\r\n    try{\r\n\r\n        const res = await axios.delete(`http://127.0.0.1:5000/api/comment/${id}/${comment_id}`)\r\n\r\n        if (res.status == 200){\r\n            const res = await axios.get(`http://127.0.0.1:5000/api/posts/${id}`)\r\n\r\n            dispatch({\r\n                type: GET_POST,\r\n                payload: res.data\r\n            })\r\n            dispatch(setAlert(\"Comment removed\", \"success\"));\r\n        }\r\n        else{\r\n            dispatch({\r\n                type: POST_ERROR,\r\n                payload: {status:res.status, msg:res.msg}\r\n            });\r\n        }\r\n\r\n    }\r\n    catch(err){ \r\n        debugger;\r\n        dispatch({\r\n            type: POST_ERROR,\r\n            payload: {status:err.response.status, msg:err.response.statusText}\r\n        });\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}